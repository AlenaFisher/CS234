/**
 * @author  Alena Fisher
 * 5/7/2024
 */

// Importing all necessary classes
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.JOptionPane;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.LinkedList;
import java.util.ListIterator;

public class Rink_GUI extends javax.swing.JFrame {
    // Declaring the variables for the rink schedule, the list of hockey teams, and the file location
    private static GameSchedule rinkSchedule;
    private static Teams Hockeyteams; 
    private static String fileLocation = "Rink.dat";

    public Rink_GUI() {
        /**
         * This constructor initializes all components for this file and the list of hockey teams
         */
        initComponents();
        Hockeyteams = new Teams();
        
        // Adding teams to the list of hockey teams
        Team carolinaHurricanes = new Team("Carolina Hurricanes", "Rod Brind'Amour", "Raleigh", "North Carolina", "26");
        Hockeyteams.addTeam(carolinaHurricanes);
        
        Team coloradoAvalanche = new Team("Colorado Avalanche", "Jared Bednar", "Denver", "Colorado", "23");
        Hockeyteams.addTeam(coloradoAvalanche);

        Team nmIceWolves = new Team("New Mexico Ice Wolves", "Phil Fox", "Albuquerque", "New Mexico", "30");
        Hockeyteams.addTeam(nmIceWolves);

        Team minnesotaWild = new Team("Minnesota Wild", "John Hynes", "St. Paul", "Minnesota", "27");
        Hockeyteams.addTeam(minnesotaWild);

        Team seattleKraken = new Team("Seattle Kraken", "Dave Hakstol", "Seattle", "Washington", "22");
        Hockeyteams.addTeam(seattleKraken);
        
        
        String s = "";
            
        // Linked lists to receive all hockey teams and their information
        LinkedList<Team> team = Hockeyteams.getTeam();
        LinkedList<Team> teams = Hockeyteams.getTeams();

        // Iterators to iterate through the list of teams and the list of each team's information
        ListIterator<Team> iterator = teams.listIterator();
        ListIterator<Team> iter = team.listIterator();

        // While loop to search through the list of teams
        while(iterator.hasNext()) {
            Team j = iterator.next();
            // While loop to search through the list of information for each team and print it out
            while(iter.hasNext()) {
                Team l = iter.next();
                s += "Team: " + l.getTeamName() + "\nCoach: " + l.getCoach() + "\nCity: " + l.getCity() + "\nState: " + l.getState() + "\nPlayers " + l.getNumOfPlayers() + "\n";
                txtDisplayTeams.setText(s);
            }
        }
    }
    
    public Rink_GUI(Club club) {
        /**
         * This constructor receives 'aClub' as an explicit parameter and creates an object for the window to be opened
         */
        this(); 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        tabRinkDisplayTeam = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        btnAddGame = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtRinkTeams = new javax.swing.JTextArea();
        lblTeam1 = new javax.swing.JLabel();
        txtTeam1 = new javax.swing.JTextField();
        lblTeam2 = new javax.swing.JLabel();
        txtTeam2 = new javax.swing.JTextField();
        lblGameDate = new javax.swing.JLabel();
        txtGameDate = new javax.swing.JTextField();
        lblGameTime = new javax.swing.JLabel();
        txtGameTime = new javax.swing.JTextField();
        lblLocation = new javax.swing.JLabel();
        txtLocation = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        btnClear = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblRinkSchedule = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDisplayTeams = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jTextField1.setText("jTextField1");

        setTitle("Rink Menu");
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tabRinkDisplayTeam.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabRinkDisplayTeamStateChanged(evt);
            }
        });

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnAddGame.setText("Schedule Game");
        btnAddGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddGameActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddGame, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 260, -1, -1));

        txtRinkTeams.setEditable(false);
        txtRinkTeams.setColumns(20);
        txtRinkTeams.setRows(5);
        txtRinkTeams.setText("Carolina Hurricanes\n\nColorado Avalanche\n\nNew Mexico Ice Wolves\n\nMinnesota Wild\n\nSeattle Kraken");
        txtRinkTeams.setBorder(javax.swing.BorderFactory.createTitledBorder("Teams"));
        txtRinkTeams.setOpaque(false);
        jScrollPane1.setViewportView(txtRinkTeams);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(362, 10, 240, 310));

        lblTeam1.setText("Team 1: ");
        jPanel1.add(lblTeam1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 50, -1));

        txtTeam1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTeam1ActionPerformed(evt);
            }
        });
        jPanel1.add(txtTeam1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 150, -1));

        lblTeam2.setText("Team 2:");
        jPanel1.add(lblTeam2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        txtTeam2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTeam2ActionPerformed(evt);
            }
        });
        jPanel1.add(txtTeam2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 150, -1));

        lblGameDate.setText("Game Date (MM/DD/YYY):");
        jPanel1.add(lblGameDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));

        txtGameDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGameDateActionPerformed(evt);
            }
        });
        jPanel1.add(txtGameDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 150, -1));

        lblGameTime.setText("Game Time:");
        jPanel1.add(lblGameTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, -1));

        txtGameTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGameTimeActionPerformed(evt);
            }
        });
        jPanel1.add(txtGameTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 150, -1));

        lblLocation.setText("Location (North or South rink):");
        jPanel1.add(lblLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, -1, -1));

        txtLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLocationActionPerformed(evt);
            }
        });
        jPanel1.add(txtLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 150, -1));

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setBorder(javax.swing.BorderFactory.createTitledBorder("Schedule Game"));
        jTextArea2.setOpaque(false);
        jScrollPane3.setViewportView(jTextArea2);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 200, 310));

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        jPanel1.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 290, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Rink.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 340));

        tabRinkDisplayTeam.addTab("Schedule Game", jPanel1);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblRinkSchedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Team 1", "Team 2", "Date", "Time", "Location"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRinkSchedule.setOpaque(false);
        jScrollPane4.setViewportView(tblRinkSchedule);

        jPanel2.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 590, 320));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Rink.jpg"))); // NOI18N
        jLabel3.setText("jLabel3");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 340));

        tabRinkDisplayTeam.addTab("Display Game Information", jPanel2);

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtDisplayTeams.setEditable(false);
        txtDisplayTeams.setColumns(20);
        txtDisplayTeams.setRows(5);
        txtDisplayTeams.setAutoscrolls(false);
        txtDisplayTeams.setOpaque(false);
        jScrollPane2.setViewportView(txtDisplayTeams);

        jPanel4.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 590, 320));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Rink.jpg"))); // NOI18N
        jLabel4.setText("jLabel4");
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 340));

        tabRinkDisplayTeam.addTab("Team Information", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabRinkDisplayTeam)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabRinkDisplayTeam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 13, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtTeam1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTeam1ActionPerformed
  
    }//GEN-LAST:event_txtTeam1ActionPerformed

    private void txtTeam2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTeam2ActionPerformed

    }//GEN-LAST:event_txtTeam2ActionPerformed

    private void txtGameDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGameDateActionPerformed

    }//GEN-LAST:event_txtGameDateActionPerformed

    private void txtGameTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGameTimeActionPerformed

    }//GEN-LAST:event_txtGameTimeActionPerformed

    private void txtLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLocationActionPerformed

    }//GEN-LAST:event_txtLocationActionPerformed

    private void btnAddGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddGameActionPerformed
            /**
            * This method collects the information from the user and creates either a hockey game that is stored
            * in the rink's game schedule
            */
        
            // Gathering the input from the user entered into the text fields
            String team1 = txtTeam1.getText();
            String team2 = txtTeam2.getText();
            String gameDate = txtGameDate.getText();
            String gameTime = txtGameTime.getText();
            String location = txtLocation.getText();
            
            // Creating the game and adding it to the game schedule
            Game game = new Game(team1, team2, gameDate, gameTime, location);
        
            // Testing if any of the text fields are left empty by the user
            if(txtTeam1.getText().isEmpty() || txtTeam2.getText().isEmpty() || txtGameDate.getText().isEmpty() || txtGameTime.getText().isEmpty() || txtLocation.getText().isEmpty()) {
                // Message to the user if any of the text fields were not filled out
                JOptionPane.showMessageDialog(this, "Enter all fields");
            }
       
            // If all the fields are filled out, the information is gathered and placed into a row in the table
            else {
                String[] row = {txtTeam1.getText(), txtTeam2.getText(), txtGameDate.getText(), txtGameTime.getText(), txtLocation.getText()};
                // Table to display the games to the user
                DefaultTableModel model = (DefaultTableModel)tblRinkSchedule.getModel();
                // Information is added to the table
                model.addRow(row);
            
                // Message to the user that the game scheduling was successful
                JOptionPane.showMessageDialog(this, "Game added");
            }     
    }//GEN-LAST:event_btnAddGameActionPerformed

    private void clearFields() {
        /**
         * This method sets all text fields to be empty so the user can schedule another game if they wish 
         */
        txtTeam1.setText("");
        txtTeam2.setText("");
        txtGameDate.setText("");
        txtGameTime.setText("");
        txtLocation.setText("");
    }
    
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        /**
         * This method calls the 'clearFields' method to reset all text fields to be empty
         */
        clearFields();
    }//GEN-LAST:event_btnClearActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // Table to display the games
        DefaultTableModel model = (DefaultTableModel)tblRinkSchedule.getModel();
        // Array list to store the data from the table
        ArrayList<String> tableData = new ArrayList<>();
        
        // For loop to gather the information from the table row by row and store it in the array list
        for(int i = 0; i < model.getRowCount(); i++) {
            String team1 = model.getValueAt(i, 0).toString();
            String team2 = model.getValueAt(i, 1).toString();
            String gameDate = model.getValueAt(i, 2).toString();
            String gameTime = model.getValueAt(i, 3).toString();
            String location = model.getValueAt(i, 4).toString();
            
            // Data is compiled and added to the array list
            String row = team1 + "," + team2 + "," + gameDate + "," + gameTime + "," + location;
            tableData.add(row);
            
            // try-catch to attempt storing the information in the dat file
            try {
                // Opening the file
                FileOutputStream file = new FileOutputStream("Rink.dat");
                ObjectOutputStream output = new ObjectOutputStream(file);
                
                // Storing the information in the file
                output.writeObject(tableData);
                
                // Closing the files
                output.close();
                file.close();
            }
            // If storing the information is unsuccessful, it catches the error
            catch(Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // try-catch to place the information stored in the file into the tables
        try {  
            // Opening the file
            FileInputStream file = new FileInputStream("Rink.dat");
            ObjectInputStream input = new ObjectInputStream(file);
            // Adding the information to the array list
            ArrayList<String> tableData = (ArrayList<String>)input.readObject();
        
            // Closing the files
            input.close();
            file.close();
        
            // Table for displaying game schedule
            DefaultTableModel model = (DefaultTableModel)tblRinkSchedule.getModel();
            // Adding the information into the table
            for(int i = 0; i < tableData.size(); i++) {
                String[] row = tableData.get(i).split(",");
                model.addRow(row);
            }
            //txtDisplayTeams.setText(team.getTeamName());
        }
        // If placing the information is unsuccessful, it catches the error
        catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowOpened

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowStateChanged

    private void tabRinkDisplayTeamStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabRinkDisplayTeamStateChanged

    }//GEN-LAST:event_tabRinkDisplayTeamStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Rink_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Rink_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Rink_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Rink_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Rink_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddGame;
    private javax.swing.JButton btnClear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblGameDate;
    private javax.swing.JLabel lblGameTime;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblTeam1;
    private javax.swing.JLabel lblTeam2;
    private javax.swing.JTabbedPane tabRinkDisplayTeam;
    private javax.swing.JTable tblRinkSchedule;
    private javax.swing.JTextArea txtDisplayTeams;
    private javax.swing.JTextField txtGameDate;
    private javax.swing.JTextField txtGameTime;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextArea txtRinkTeams;
    private javax.swing.JTextField txtTeam1;
    private javax.swing.JTextField txtTeam2;
    // End of variables declaration//GEN-END:variables
}
